Author: John Royce C. Punay
Date: April 10, 2020 2:30 PM

Objectives: To have solid understanding of terminal usage using Linux shell command line.


Why use the command line?
	- It's been said that “graphical user interfaces make
		easy tasks easy, while command line interfaces make difficult tasks possible” and this is
		still very true today.

What is the shell ?
	- When we speak of the command line, we are really referring to the shell.
	- The shell is a program that takes keyboard commands and passes them to the operating system to carry
		out.
	- bash “Bourne Again SHell”, enhanced replacement for sh, the original Unix shell program written by
		Steve Bourne.

Commmands
	Useful:
		$ - Current working directory
			username@machinename e.g: royce@royce-pc$:
		# - Super user privileges, meaning logged in as root user or admin.
		cal - display month calendar
		df - display current amount of space disk drives
		free - display amount of free memory
		exit - end terminal
		clear - clear command
		printenv | less - Prints all variable of the machine
	Navigation:
		pwd  - print working directory
		cd - change directory
			cd -
		ls - list content of directory 
			- ls -lahF
			- ls ~ /usr
	Exploring the system:
		file - Determine file type 
		less - View text files, by examine the content.
			- Can be binary content but the system will ask you to open.
	Manipulating:
		cp - copy files and directories
		mv  - move and rename files and directories
		rm - remove files and directories
		lb - create hard and symbolic links
		mkdir - create directories
		ln - create symbolic link

	Working with own commands
		type - Indicate how a command name is interpreted
		which - Display which executable program will be executed
		help - Get help for shell bins
			help cd 
			mkdir --help
		man - Display a command's manual page
		apropos -  Display a list of appropriate commands
		info - Display command info 
		whatis - Display one-line manual page desc
		alias - Create an alias for command

	Redirection 
		- I/O redirection or redirect - by means we can input / output commands to and from other files , 
		or multiple commands.
		cat - Concatenate files 
		sort - Sort lines of text
		uniq - Report or omit repeated lines
		grep - Print lines matching with a pattern
		wc - Print newline, word and byte counts for each file
		head - Output first part of the file
		tail - Output last part of file
		tee - Read from standard input and write to standard output files
		> (Overwrite)- Redirect and overwritten can be file name or path. Create files or folder
		>> - Redirect Posix systems but not overwritten instead append new item from the existing file.
			> haha.txt --> What it does create a file 
			>> haha.txt --> What it does create an append content to a file if existing
			Redirect STDERR
				ls -l /usr/bin > ls-output.txt
				ls -l /bin/usr 2> ls-error.txt (Redirect using stderr w/ file descriptor "2")
				ls -l /bin/usr > ls-output.txt 2>&1 (Redirect using stderr and stdout w/ file descriptor "1" and "2")
				ls -l /bin/usr &> ls-output.txt 
				ls -l /bin/usr 2> /dev/null (Disposing unwanted output aka silence is golde)
				/dev/null - Is a system device or bitbucket which accept input and does nothing.
			Redirect STDIN
				cat ls-output.txt // Assume the text file is exsiting
				cat movie.mpeg.0* > movie.mpeg
					- An example of wildcard matching for multiple files with same name.
				cat
					- When you enter a cat with no argument it will function as read line input	
						as this command is categorized at STDIN typing argument which is 
						a keyboard already an INPUT would only display the output as STDOUT.
				cat >> lazy_dog.txt
					- Means redirect STDIN to a file and append content.
				cat < lazy_dog.txt
					- Change the source to a command from the file lazy_dog.txt
			Pipelines ( | ) 
				- Commmands capability to read data as stdinput and send data to stdoutput.
				in short a pipeline is a handy tool and technique to examine the output.
				- Often used for to perform complex operations on data.
				- Possible to put multiple commands chained by the pipeline symbol

				- Syntax: <command> | <command>
					Example
						ls -l /usr/bin | less 
						ls | less
						ls -lahFt | less >> lazy_dog.txt 
							- Combo for Navigation, Exploring and redirect 
						Pro tip: 
						Dont run ls > less inside /usr/bin.
			Filters (uniq, sort, wc)
				- Similar to pipeline but the output of the data is being filetered after running 
					multiple commands
				- sort command is an stdinput which sort the stdout
				Example
					ls /bin /usr/bin | sort | less
					ls | sort
					sort a,b,c,d
				- uniq command is to remove duplication of data before doing stdout
					ls /bin /usr/bin | sort | uniq | less
					sort | uniq

				- wc or stands for word count, this command is for displaying number of lines, words or even
					bytes under file.
					wc royce.text
					ls /bin /usr/bin | sort | uniq | wc -l
				- grep is a powerful program used to match text patterns within files.
					when pattern matched from grep it will print out to the line.
				 	Example: grep pattern [file....]
					ls /bin /usr/bin | sort | uniq | grep ssh
				- head and tail commands are for including first ten or last ten of the line
					it can be adjusted using -n 
					Example:
						ls | head -n 5
						head -n 5 royce.txt
						tail -n 5 ls-output.txt
						ls | tail -n 5
						For real time include option -f 
				- tee is a useful reads std input and stdout to a file
					Example: 
						ls /usr/bin | tee ls.txt | grep zip
						What it does, copied all content then save to a file exclude a file with a "zip" word.

	Expansion (technique) which is the most useful content.
		- For this we will just expand the value coming out from the command. A good example is echo
			echo $PATH
			echo 
			echo hello world
			echo "hello world"
		- Path name expansions are technique that utilise wildcards on a given path.
			echo * 
			echo D*
			echo [[:lower:]]*
			echo [[:upper:]]*
			echo .*
			echo .[!.]*
		- Tilde (~) - When this symbol is used in the beginning of a word,
				it expands "Home directory of the user".
			Example:
			echo ~
			echo $HOME
			ls ~ > ls2.txt
			echo ~ > ls3.txt
			If home directory has royce run this 
				echo ~royce
		- Arithmetic - allowing arithmetic operaion
			$((expression))
			+,-,/,*,%,**
				echo $((2+2))
				echo $(((5**2) * 3))
		- Brace - strangest expansion by creating multiple strings from the pattern 
				containing the braces.
				echo Front-{A,B,C}-Back
				ecyo royce{1,2,3} --> royce1 royce2 royce3
				echo royce{1..3} --> royce1 royce2 royce3
				echo {0..10} --> 0 1 2 3 4 5 6 7 8 9 10
				echo {A..Z} --> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
				echo {Z..A} --> Output is the reverse of alphabetical letters
				A nested brace expansion - echo a{A{1,2},B{3,4}}b --> aA1b aA2b aB3b aB4b
				mkdir {0..1}
		- Parameter - Introduces $
			- Store small chunks of data and give it a name or simple called a variable
				echo $USER --> me
				printenv | less
				a=100
				echo $a --> 100
		- Command substitution - allowing to output the command as an expansion
			echo $(ls)
		 	ls -l $(which cp) -->  -rwxr-xr-x 1 royce 197121 101764 Oct  5  2017 /usr/bin/cp*
			file $(ls -d /usr/bin/* | grep zip)
			- backqoutes - is the substitution for command under old bash version
				ls -l `which cp` -->  -rwxr-xr-x 1 royce 197121 101764 Oct  5  2017 /usr/bin/cp*
		- Qoutes 
			 echo this is a test --> this is a test
			 echo The total is $100.00 --> The total is 00.00
			 echo "this is a test" --> this is a test
		- Escaping char
			 echo "Total is \$100" --> Total is $100

	History  (1000 commands)
		- The list of commands are being kept at .bash_history file.
		Example
			history | less -> Display all commands history
			history | grep echo
			less | sort ~/.bash_history
			tail -f ~/.bash_history --> This to check all of the history command in real time.
			!<no in history line> This what we called history expansion let say 1: echo 1
			!1 --> echo 1

	Permissions
		- An OS is not just multitasking system but also multiuser system
		- Introducing the multi-user systems (feature), means one or more person
			can use the same computer at the same time. 
			When a computer attached to the network remote user can 
			access the computer via ssh (secure shell) then operate the 
			computer.

		id – Display user identity display UID and GID (user identifer, group identifier)
 		chmod – Change a file's mode
 		umask – Set the default file permissions
 		su – Run a shell as another user
 		sudo – Execute a command as another user
 		chown – Change a file's owner
		chgrp - Change a file's group ownership
		passwd - Change a user's password


	Owners, group members and everybody else
		id --> uid=197608(royce) gid=197121 groups=197121
			uid is mapped for a username, 
			gid is the primary group

		Owner-Group-World -> This is a syntax for permission
		rwxrwxrwx
		Write action (Create, Rename, Delete)
		Read (Read)
		Execute (Program executable, enter in the directory)
		File types 
		- (A regular file)
		d (Directory)
		l (Symbolic link)
		c (Character or special file)
		b (block special file)

		Example
		-rwx---- (File rwx by owner only)
		rwxrwxrwx (File rwx by owner, group, everybody)
		lrwxrwxrwx (Symlink that can be rxw by owner, group, everybody)
		drwxrwx--- (Directory rwx by owner and group only)
		drwxr-x--- (Directory rwx by owner and x by group)


		chmod - A command that change mode permissions of file and directory.
			This command can be only execute by file's owner or administrator (superuser)
			Mode of changes
			1.) Octal number representation
				- Base 8 number system
				- File modes and binary octal
						421					    
					0	000	---
					1	001	--x
					2 	010 -w-
					3	011 -wx
					4 	100 r--
					5 	101	r-x
					6 	110 rw-
					7 	111 rwx
				-rwx------ 		A regular file that is readable, writable, and executable by the file's owner. No one else has any access.
				-rw------- 		A regular file that is readable and writable by the file's owner. No one else has any access.
				-rw-r--r-- 		A regular file that is readable and writable by the file's owner. Members of the file's owner group may read the file. The file is world-readable.
				-rwxr-xr-x 		A regular file that is readable, writable, and executable by thefile's owner. The file may be read and executed by everybody else.
				-rw-rw---- 		A regular file that is readable and writable by the file's owner and members of the file's group owner only.
				lrwxrwxrwx 		A symbolic link. All symbolic links have “dummy” permissions. The real permissions are kept with the actual file pointed to by the symbolic link.
				drwxrwx--- 		A directory. The owner and the members of the owner group may enter the directory and create, rename and remove files within the directory.
				drwxr-x--- 		A directory. The owner may enter the directory and create, rename, and delete files within the directory. Members of the owner group may
				- chmod 700 royce.txt --> The owner of this granted rwx then group and others none
			2.) Symbolic representation
				Three parts 
					- Who the change will affect
					- Which operation will be performed
					- What permission will be set
					
				 		u - user or owner of the directory
						g - Group owner
						o - others means world or everybody
						a - all combined of u,g,o or if no symbol to be found
						+ means permission added 
						- means permission removed
						= means specified permission
						u+x 		Add execute permission for the owner.
						u-x 		Remove execute permission from the owner.
						+x 			Add execute permission for the owner, group, and world. This is
									equivalent to a+x.
						o-rw 		Remove the read and write permissions from anyone besides the
									owner and group owner.
						go=rw 		Set the group owner and anyone besides the owner to have read and
									write permission. If either the group owner or the world previously
									had execute permission, it is removed.
						u+x,go=rx 	Add execute permission for the owner and set the permissions for
									the group and others to read and execute. Multiple specifications
									may be separated by commas.
		
		umask - a command that gives default permission to file using octal notation when its created.
				- The value is always set to default (0022)
				
				Example
				umask (octal representation hint ignore first digit still 002) --> 0002
				umask -S (Symbolic representation)
				> foo.txt 
				ls -l foo.txt --> 
		
		Changing identities
			su  - Command that start a shell as another user.
				Requires to input super user password
				su -
				Password:
				# (Root privileges)
				su -c <command>
				su -c 'ls -l /root/*'
			sudo - A command that execute as another user. Similart to su 
				but the difference is you must input user own password.
				And not starting a new shell
				- When you used the sudo first time, the system won't ask you the password for several 
						minutes until time runs out.

			chown - is used to change the owner and group owner of file or 
					directory.
				  - Superuser required to use this command.
				chown [owner][:[group]] file...
				[janet@linuxbox ~]$ sudo cp myfile.txt ~tony
				Password:
				[janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt
				-rw-r--r-- 1 root root root 2018-03-20 14:30 /home/tony/myfile.txt
				[janet@linuxbox ~]$ sudo chown tony: ~tony/myfile.txt
				[janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt
 				-rw-r--r-- 1 tony tony tony 2018-03-20 14:30 /home/tony/myfile.txt

				For an example scenario we may check Exercising Our Privileges page (106)
			passwd - used to change user's password. At first it will be prompted 
					to put your old password then your new password.
				[me@linuxbox ~]$ passwd
				(current) UNIX password:
				New UNIX password:
				BAD PASSWORD: is too similar to the old one
				New UNIX password:
				BAD PASSWORD: it is WAY too short
				New UNIX password:
				BAD PASSWORD: it is based on a dictionary word

		Other commands related to users and group
			adduser
			useradd
			groupadd

	Processes
		- Modern OS systems are multitasking, by doing one or more jobs.
		- This is managed by Linux kernel to the use of processes.
		- Usage in command
			1) To monitor our system if misbehaving because of task running
			2) How to stop certain process
			ps – Report a snapshot of current processes
 			top – Display tasks
 			jobs – List active jobs
 			bg – Place a job in the background
 			fg – Place a job in the foreground
 			kill – Send a signal to a process
 			killall – Kill processes by name
 			shutdown – Shutdown or reboot the system


		How processes works?
			- When a system starts up the kernel initiates the init.init function 
				and its called as init scripts. The usage is to start system service.
			- init scripts are being implemented through daemon programs that runs in the background.
			- happening in real time even if we aren't login.
			- The fact these running programs are expressed in the process scheme called prent process 
				then producting child process.
			
			Viewing processes
				ps - the command that allows user to display current processes.
				$ ps
					PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
					6680    3916    6680       6356  pty0      197608 13:45:42 /usr/bin/ps
					5380       1    5380       5380  ?         197608 07:54:36 /usr/bin/mintty
					3916    5380    3916       5244  pty0      197608 07:54:36 /usr/bin/bash
				
				To see bigger picture for current running process run this command:
				ps x
				x means show all processes regardless of the terminal or controlled by.
				$ ps x
					PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
					5380       1    5380       5380  ?         197608 07:54:36 /usr/bin/mintty
					5552    3916    5552       4544  pty0      197608 13:49:30 /usr/bin/ps
					3916    5380    3916       5244  pty0      197608 07:54:36 /usr/bin/bash

				TTY means teletype 
				? means no assigned controlling terminal to that process.

				For easier viewing incorporate the ps with less:

				ps | less

				To view all processes for all users run this command.
				ps aux

					USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
					root 1 0.0 0.0 2136 644 ? Ss Mar05 0:31 init
					root 2 0.0 0.0 0 0 ? S< Mar05 0:00 [kt]
					root 3 0.0 0.0 0 0 ? S< Mar05 0:00 [mi]
					root 4 0.0 0.0 0 0 ? S< Mar05 0:00 [ks]
					root 5 0.0 0.0 0 0 ? S< Mar05 0:06 [wa]
					root 6 0.0 0.0 0 0 ? S< Mar05 0:36 [ev]
					root 7 0.0 0.0 0 0 ? S< Mar05 0:00 [kh]

					USER =	User ID. This is the owner of the process.
					%CPU = 	CPU usage in percent.
					%MEM = 	Memory usage in percent.
					VSZ  =	Virtual memory size.
					RSS  = 	Resident set size. This is the amount of physical memory (RAM) the process is using in kilobytes.
					START =	Time when the process started. For values over 24 hours, a date is used.


			Viewing processes Dynamically with top
				- To see more dynamic machine's activity use top command
				- The top program displays a continuously updating (by default, every three seconds) display of the system processes listed in order of process activity
				- top command is similar to task manager on the Windows 
				- top
			
			Controlling Processes
				- In terminal to interrupts a progam hit or pressed ctrl - c
				- Used jobs to check active jobs in the shell
				ampersand(&) Stands for background jobs
				royce@royce-PC MINGW64 ~/Documents/Dev/RoadToBE (master)
					$ sleep 100 &
					[2] 2124

				royce@royce-PC MINGW64 ~/Documents/Dev/RoadToBE (master)
					$ jobs
					[1]-  Running                 sleep 100 &
					[2]+  Running    

				To kill or stop process used kill commands
				- kill <process ID>
					royce@royce-PC MINGW64 ~/Documents/Dev/RoadToBE (master)
					$ kill 2124
					[2]+  Terminated              sleep 100
					Number 		Name	 	Meaning
					1			HUP		 	Hang up
					2			INT			Interrupt
					9			KILL		KILL, immediately terminate the process
					15 			TERM		Terminate, if still alive it will terminate automatically
					18			CONT		Continue
					19			STOP		Stop
					20 			TSTP		Terminal stop

				kill <number> <PID>
				kill -1 2124
				[1]+  Hangup                  sleep 100
				kill -INT 6980
				[1]+  Interrupt               sleep 100
				- killall, this is same concept with kill command


			Shutdown the system
			- sudo reboot
			- sudo shutdown -h now
			- sudo shutdown -r now


	Configuration and Environment
		- The place where system information attached is called environment.
		- All program systems configuration can be found at environment.
		- Whilst most programs used configuration file to store program settings.
		- Having this setup we can adjust shell experience
			printenv – Print part or all of the environment
			set – Set shell options
			export – Export environment to subsequently executed programs
			alias – Create an alias for a command

		Examining the environment
			printenv | less
			printenv <ENV variables>
			echo <ENV variables>
			royce@royce-PC MINGW64 ~/Documents/Dev/RoadToBE (master)
			$ printenv USERNAME
				royce
			royce@royce-PC MINGW64 ~/Documents/Dev/RoadToBE (master)
			$ echo $USERNAME
				royce

			To display all contents from environment variables and shell variables
			set | less
		How Is the environment Established?
			-After we login our account the bash programs start reading series of 
				configuration scripts called startup files.
				- login shell session
				- non login shell sessions
				Start up files for login shell sessions
					File				Content
					/etc/profile		Global config for all users
					~/.bash_profile		Personal startup file
					~/.bash_login		If bash_profile is not found, bash attempts to read this script.
					~/.profile			If neither ~/.bash_profile nor ~/.bash_login is found, bash attempts to read this file
				Startup files for non login shells
					File					Content
				    /etc/bash.bashrc		Global config for all users
					~/.bashrc 				A user's personal startup file. I
				The export command tells the shell to make the contents of PATH available to child
				processes of this shell.
				export PATH


	Gentle indroduction to VI
		VI is an unix text editor
		Why we should learn VI
			- vi is highly available because POSIX based system 
				requires vi to be present?
			- vi is lightweight and fast
			- Not cowards
			- vi stands for visual due to editing video terminal with a moving cursor.
			- vim stands for vi improved, as symbolic link to vi functionality

			Cursor movement keys
			l - right
			h - left
			j - down
			k - up

			Deleting a text 
			x - current char
			dd - current line
	
























				 
https://www.unix.com/shell-programming-and-scripting/60266-how-find-out-home-directory-user.html
https://l.facebook.com/l.php?u=https%3A%2F%2Faskubuntu.com%2Fquestions%2F382793%2Fwhats-is-the-difference-between-and-in-shell-command%3Ffbclid%3DIwAR2v_JJIrEGEgof9WqjiiFdOrEUoHL8XgUYbO00XflbX2obGih5RytbiCMw&h=AT1R-A8kWIeTUpKlUj6D5YzBeKk0aAnJv5VaGp7mIF_HPYTkKmOOdVMqKJewBkoXz1buts_C-VPbjoR2hkyKm1iFS_of79dA-XDYfzeTu783bDBJ5_QgZmWnuos6CZlQ&__tn__=H-R&c[0]=AT3GXsh-h099E55Jc3hdcmpVjxQU99TO6JOPMsjqPyDpfSZF65wXOYgy_3uu0tg0Op5hiGPrU2JfmgQvNTKfR8d5wUNziRCkRh2QgDhCUB7PtF8j4PSv7f8C1IaHyyLFgA7ImTML6dnnXBdgzIxUdQ
https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html
http://faculty.bucks.edu/cornelld/numbersystem.htm#base%202%20from%20base%208
https://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.html
https://www.computerhope.com/unix/uumask.htm
https://en.wikipedia.org/wiki/Malware