Author: John Royce C. Punay
Date: March 22, 2020 3:00 PM

Objectives
 To have a solid understanding and grasp knowledge about HTTP cache. What is the usecase and 
 when to use this technique.


 How cache is related to the web?
  - Modern web application improved perfomance by reusing the previous fetched resources rather than it process the request.
    So by means latency is reduce and network traffic which lessen the time to display the response. 

Caching
  - It's an optimazation technique that allows to store copy of items on given resource when the operation is repeated.

Web cache 
  - When a web cache is configured, the request will be intercept instead return the copy of request to avoid reprocess or redownload the request 
     from the originating server.

Advantage on web cache
 1. Booting server and computational mechanism is not happened in the origin web server.
 2. Improved perfomance as being closer to reach the client on the request.
 3. Less time transport the request back.

Disadvantage
 1. Consume time for proper configuration as resources aren't identical to each other.
 2. Only cache common things until it changes not longer relevant. Reprocess to other clients that uses it.

 Two category of web cache
 1. Private cache - only for single user. This can be found on the web browser settings.
 2. Shared cache - only for multiple users. This caching approach is more applied on the networking side 
 by having local network infrastructure that relay message at the same time for all users.


 Targets of caching operations

  - HTTP caching is an optional parameters.
  - But reusable resources are desirable to make it performant
  - HTTP caching is limited to GET HTTP method.
  - Common forms of caching entities are 200(OK), 301(Moved Permanently), 404(Not Found), 206(Partial Content)


Controlling caching
1.) Cache-Control (HTTP/1.1) - a header field used both request and response. The usage of this header is to defind
    a.) No caching - Each request and response downloaded every time 
      ex: Cache-control: no-store
    b.) Cache but revalidate - The cache operation send a request to origin server for validation before 
        releasing a cached copy. 
      ex: Cache-control: no-cache		
    c.) Private and public caches - Public for HTTP authentication, Private is for single user cache.
     ex: Cache-control: private
     ex: Cache-control: public
    d.) Expiration - When would the cache be expired. Applied thr	ough the assets like CSS,HTML,JS files.
     ex: Cache-control: max-age=<seconds> 
    e.) Validation -  Should validate first the existing cache before using it.
	 ex: Cache-control: must-revalidate
2.) Pragma header (HTTP/1.0) - This header behaves the same with Cache-Control: no-cache but with the least version.


Freshness
1.) Cache eviction - is the process on removing items in the cache periodically.
2.) Before the resources cached its expiration time is `FRESH` whilst after the expiration time its `STALE
3.) There is called eviction algorithm applied to fresh resources where if the cache storage is full it will
	 expel an element in the cache randomly using LRU (Least Recently Used).
4.) For stale resources it doesn't use cache eviction policy instead it will forward a header known as 
    <If-None-Match> to verify it still fresh.If so server responed 304 (Not modified) to save bandwith.

Formula:
Cache-control: max-age=N then N is equal FRESHNESS life time. Then If Expires header exists minus Date header 
 then that is the FRESHNESS.

 expirationTime = responseTime + freshnessLifetime(max-age) - currentAge (Date received)

where responseTime is the time at which the response was received according to the browser.


Cache Validation
 1.) When resources from the cached expired it will validate or refetched. 
		typically happening when reload the web browser. If the cache response from the server include 
		a header of Cache-control: must-revalidate.
 2.)  Etags is a strong validator because the client doesn't know the representation and can't predict what 
       will be the value. This is a validation token used to communicate and 
	   check if the resources are modified.
 3.)  Last-Modified is a weak validator its only 1 second of resolution.  If this header is available on the 
		response the client can issued a new header called If-Modified-Since to validate the cache document.
When a validation is made the server can ignore the request instead return 200 or 304 not modified with an empty
 body just to reuse the current cached  document the expiration time can be found on the header of latter response.

As a web developer how do you solve the efficiency of token validation for cache? Although browser does all 
the work. Like detects if a validation token has been previously specified, it appends the validation token to an outgoing request, 
and it updates the cache timestamps as necessary based on the received response from the server.

The only thing need todo is ensure that server get the latest ETag token which provide by the client.


https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching
https://www.ehcache.org/documentation/2.8/apis/cache-eviction-algorithms.html
https://www.youtube.com/watch?v=S6IfqDXWa10
https://tools.ietf.org/html/rfc7234
https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching
https://redbot.org/