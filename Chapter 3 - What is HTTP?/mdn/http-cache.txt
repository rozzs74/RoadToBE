Author: John Royce C. Punay
Date: March 22, 2020 3:00 PM

Objectives
 To have a solid understanding and grasp knowledge about HTTP cache. What is the usecase and 
 when to use this technique.


 How cache is related to the web?
  - Modern web application improved perfomance by reusing the previous fetched resources rather than it process the request.
    So by means latency is reduce and network traffic which lessen the time to display the response. 

Caching
  - It's an optimazation technique that allows to store copy of items on given resource when the operation is repeated.

Web cache 
  - When a web cache is configured, the request will be intercept instead return the copy of request to avoid reprocess or redownload the request 
     from the originating server.

Advantage on web cache
 1. Booting server and computational mechanism is not happened in the origin web server.
 2. Improved perfomance as being closer to reach the client on the request.
 3. Less time transport the request back.

Disadvantage
 1. Consume time for proper configuration as resources aren't identical to each other.
 2. Only cache common things until it changes not longer relevant. Reprocess to other clients that uses it.

 Two category of web cache
 1. Private cache - only for single user. This can be found on the web browser settings.
 2. Shared cache - only for multiple users. This caching approach is more applied on the networking side 
 by having local network infrastructure that relay message at the same time for all users.


 Targets of caching operations

  - HTTP caching is an optional parameters.
  - But reusable resources are desirable to make it performant
  - HTTP caching is limited to GET HTTP method.
  - Common forms of caching entities are 200(OK), 301(Moved Permanently), 404(Not Found), 206(Partial Content)


Controlling caching
1.) Cache-Control (HTTP/1.1) - a header field used both request and response. The usage of this header is to defind
    a.) No caching - Each request and response downloaded every time 
      ex: Cache-control: no-store
    b.) Cache but revalidate - The cache operation send a request to origin server for validation before 
        releasing a cached copy. 
      ex: Cache-control: no-cache
    c.) Private and public caches - Public for HTTP authentication, Private is for single user cache.
     ex: Cache-control: private
     ex: Cache-control: public
    d.) Expiration - When would the cache be expired. Applied thr	ough the assets like CSS,HTML,JS files.
     ex: Cache-control: max-age=<seconds> 
    e.) Validation -  Should validate first the existing cache before using it.
	 ex: Cache-control: must-revalidate
2.) Pragma header (HTTP/1.0) - This header behaves the same with Cache-Control: no-cache but with the least version.




https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching