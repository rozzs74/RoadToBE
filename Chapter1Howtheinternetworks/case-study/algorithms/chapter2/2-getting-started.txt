Insertion sort
	- solves sorting problem
	- With the ff
		1) Input: sequence of n numbers (a1,a2...an)
		2) Output: permutation ordering of the input sequence such that a1 <= a2 <= ..... <= an
	- the numbers we wish to sort is called keys
	- pseudocode employs expressive method clear and cocise to specify a given algorithm. The cleares method here is
		english
	- this type of sort usually a hand of playing cards.
	- this type of algorithm is efficient when sorting small numbers of elements
	- actual inputs for the insertion algorithm is containing the sequence of numbers and its length.
		[A.......1] A.length
	- What it really does?
		a) sorts input numbers in place.
		b) rearranges the numbers within array
		c) most constant numbers are stored outside array any time
		d) the input array contains the sorted output sequence when the insertion-sort produce finished	
    - Three categories for loop variations when working insertion sort
        a) Initialization
        b) Maintenance
        c) Terminations


Exercises
Using Figure 2.2 as a model, illustrate the operation of INSERTION-SORT on the array A = [31, 41, 59, 26, 41, 58].
    a = [31, 41, 59, 26, 41, 58]
    a = [31, 41, 59, 26, 41, 58]
    a = [31, 41, 59, 26, 41, 58]
    a = [26, 31, 41, 59, 41, 58]
    a = [26, 31, 41, 41, 59, 58]
    a = [26, 31, 41, 41, 58, 59]

Rewrite the INSERTION-SORT procedure to sort into nonincreasing instead of non- decreasing order.
    INSERTION-SORT(A)
    for j = 2 to A.length
        key = A[j]
        i = j - 1
        while i > 0 and A[i] < key
            A[i + 1] = A[i]
            i = i - 1
        A[i + 1] = key

Consider the searching problem:
Input: A sequence of n numbers A D ha1;a2;:::;ani and a value 􏰈.
Output: An index i such that 􏰈 D AŒi􏰇 or the special value NIL if 􏰈 does not
appear in A.
Write pseudocode for linear search, which scans through the sequence, looking for 􏰈. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop invariant fulfills the three necessary properties.

    LINEAR-SEARCH(A, v)
    for i = 1 to A.length
       if A[i] == v
            return i
    return NIL


Loop invariant: At the start of each iteration of the for loop, the subarray A[1..i - 1]A[1..i−1] consists of elements that are different than vv.

Initialization: Before the first loop iteration (i = 1i=1), the subarray is the empty array, so the proof is trivial.

Maintenance: During each loop iteration, we compare vv with A[i]A[i]. If they are the same, we return ii, which is the correct result. Otherwise, we continue to the next iteration of the loop. At the end of each loop iteration, we know the subarray A[1..i]A[1..i] does not contain vv, so the loop invariant holds true. Incrementing ii for the next iteration of the for loop then preserves the loop invariant.

Termination: The loop terminates when i > A.length = ni>A.length=n. Since ii increases by 11, we must have i = n + 1i=n+1 at that time. Substituting n + 1n+1, for ii in the wording of the loop invariant, we have that the subarray A[1..n]A[1..n] consists of elements that are different than vv. Thus, we return \text{NIL}NIL. Observing that A[1..n]A[1..n], we conclude that the entire array does not have any element equal to vv. Hence the algorithm is correct.